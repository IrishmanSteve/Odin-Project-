The shell is a program where users can type commands.
With the shell, it’s possible to invoke complicated programs like climate modeling software,
Or simple commands that create an empty directory with only one line of code.

To find out where you are you can type 'pwd' which stands for 'Print Working Directory'
Directories are like places — at any time while we are using the shell, we are in exactly one place called our 'current working directory'.

Example:  

$ pwd                     - Prints "/home/stephen" on Linux and "C:\Users\Steve" on windows

There are 2 meanings for the / character. 
When it appears at the front of a file or directory name, it refers to the ROOT DIRECTORY, that holds everything else.
When it appears inside a path, it’s just a separator.
so '/Users/Steve'  means - root > Users > Steve

$ ls                      - lists everything in the current directory, an example would be "Desktop  Documents  Music  Photos" etc.
                          - is in Alphabetical order
$ ls -r                   - is in reverse-Alphabetical order       
$ ls -t                   - lists items in order of when they were recently changed being the 1st

So if you wanted to order files so that the most recently changed appears LAST, you could use     $ ls -rt

you can also add "-F" to make the output more comprehensible like so

$ ls -F                   - lists it like this "Desktop/  Documents/  Music/  Photos/"
$ ls -a                   - means "show all"

a trailing "/" means its a directory
a "@" means its a file
a "*" means its a executable

$ clear                   - will clear the terminal, but you can still use the arrow keys to see past commands

the "--help" option will tell you how to use the command like so

$ ls --help

you can also use:

$ man ls                 - will turn it into a terminal where you can search for specific words with the "/word"
                         - man stands for manual

$ cd                     - stands for 'Change Directory' within the shell. It's the equivalent to clicking on files in a GUI.
                         - example:
                         
$ cd Users
$ cd Steve
$ cd Desktop

If we want to go back up the chain or directories, you use the shortcut of

$ cd ..                  - “the directory containing this one”, or more succinctly, the parent of the current directory.
$ cd -                   - Takes you into the previous directory I was in, similar but not the same as above.

$ mv                     - can move a file to somewhere else, change the name of it, and overwrite previous data

The first argument tells mv what we’re ‘moving’, while the second is where it’s to go. 
In the following case, we’re moving thesis/draft.txt to thesis/quotes.txt, which has the same effect as renaming the file. 

$ mv thesis/draft.txt thesis/quotes.txt                   - Changes or (moves) thesis/draft.txt     into    thesis/quotes.txt


'mkdir' is not limited to creating single directories one at a time. 
The '-p' option allows mkdir to create a directory with nested subdirectories in a single operation:

$ mkdir -p ../project/data ../project/results             - This created 3 folders named project, data, and results
                                                          - Note: it wouldn't create a project folder if it already existed

$ cp                     - Works the same way as $ mv but instead of moving it, it will copy it.
                         - Can copy many files and directories at once, as long as the last argument is a directory name

$ rm                     - Removes files so that if you check for it with $ ls it should say "No such file or directory"
                         - Only works on FILES, not directories (folders) unless you use $ rm -r / $ rm -r -i to be safe

* is a wildcard, which matches zero or more characters
? is also a wildcard, but it matches exactly one character.

Examples of how to use both are below: 

*.pdb matches ethane.pdb, propane.pdb, and every file that ends with ‘.pdb’. 
p*.pdb only matches pentane.pdb and propane.pdb.

?ethane.pdb would match methane.pdb whereas 
*ethane.pdb matches both ethane.pdb, and methane.pdb.

Which ls command(s) will produce this output?

            ethane.pdb methane.pdb

1. - $ ls *t*ane.pdb
2. - $ ls *t?ne.*
3. - $ ls *t??ne.pdb            - Answer
4. - $ ls ethane.

$ wc        - is the ‘word count’ command: it counts the number of lines, words, and characters in files (from left to right, in that order).


An example of it in use would be: 

$ wc cubane.pdb                             - Would print   >    20  156 1158 cubane.pdb

If you instead wanted to see the wc for a few different files, you could write:

$ wc *.pdb

And this would print out something like: 

                                               30  246  1828  octane.pdb
                                               21  165  1226  pentane.pdb
                                               15  111  825   propane.pdb
                                               66  522  3879  total
And if you only wanted it to count one thing, you'd add an option to wc like so:

$ wc -l             - Counts lines
$ wc -m             - Counts characters
$ wc -w             - Counts words

If you forget to give it something to count like above, it will sit there waiting for you do give it something, you can exit this state with Ctrl+C

If you needed to check 1000 files to see which had the fewest lines, you could do this:

$ wc -l *.pdb > lengths.txt

The greater than (>) sign in shell will redirect the output of the command into a file, rather than printing it to the screen
Note: if the file exists, it will be overwritten without warning, and if it doesn't it will now be created.
A simple way to check if it now exists is to type:

$ ls lengths.txt

Next we can use the command $ cat (concatenate) to print the output to the screen like so:

$ cat lengths.txt

30  octane.pdb
21  pentane.pdb
15  propane.pdb
66  total

The $ cat command may dump more info than you need though so sometimes using $ less will be better and it will only fill the screen. 
Space bar to go forward a page & 'b' to go back.

The $ sort command can help to sort but if you use it as is, it will print numbers in ALPHANUMERIC order (10, 15, 2, 27, 3, 45)
The $ sort -n command will now print the numbers in NUMERIC order like so: (2, 3, 10, 15, 27, 45)

The $ sort command does NOT change the file to this, it only prints it to the screen.

$ sort -n lengths.txt                             - would print out:

15  propane.pdb
21  pentane.pdb
30  octane.pdb
66  total

We can put the sorted list of lines in another temporary file called sorted-lengths.txt by putting > sorted-lengths.txt after the command like so:

$ sort -n lengths.txt > sorted-lengths.txt
$ head -n 3 sorted-lengths.txt                    - would print the first 3 lines of sorted-lengths.txt because of the '-n 3

The $ head command will print the first few lines of a file, depending on the specified number after '-n _'
The $ tail command will print the last few lines of a file, depending on the specified number after '-n _'

The difference between the operator '>' and '>>' is that
> will overwrite the file with your data
>> will append the data to the file

So if you kept running the following commands, it would give 2 different outcomes
$ echo hello > testfile01.txt                      - would keep overwriting the same file with one word 'hello'
$ echo hello >> testfile02.txt                     - would keep appending the word 'hello' to the same file
