The shell is a program where users can type commands.
With the shell, it’s possible to invoke complicated programs like climate modeling software,
Or simple commands that create an empty directory with only one line of code.

To find out where you are you can type 'pwd' which stands for 'Print Working Directory'
Directories are like places — at any time while we are using the shell, we are in exactly one place called our 'current working directory'.

Example:  

$ pwd                     - Prints "/home/stephen" on Linux and "C:\Users\Steve" on windows

There are 2 meanings for the / character. 
When it appears at the front of a file or directory name, it refers to the ROOT DIRECTORY, that holds everything else.
When it appears inside a path, it’s just a separator.
so '/Users/Steve'  means - root > Users > Steve

$ ls                      - lists everything in the current directory, an example would be "Desktop  Documents  Music  Photos" etc.
                          - is in Alphabetical order
$ ls -r                   - is in reverse-Alphabetical order       
$ ls -t                   - lists items in order of when they were recently changed being the 1st

So if you wanted to order files so that the most recently changed appears LAST, you could use     $ ls -rt

you can also add "-F" to make the output more comprehensible like so

$ ls -F                   - lists it like this "Desktop/  Documents/  Music/  Photos/"
$ ls -a                   - means "show all"

a trailing "/" means its a directory
a "@" means its a file
a "*" means its a executable

$ clear                   - will clear the terminal, but you can still use the arrow keys to see past commands

the "--help" option will tell you how to use the command like so

$ ls --help

you can also use:

$ man ls                 - will turn it into a terminal where you can search for specific words with the "/word"
                         - man stands for manual

$ cd                     - stands for 'Change Directory' within the shell. It's the equivalent to clicking on files in a GUI.
                         - example:
                         
$ cd Users
$ cd Steve
$ cd Desktop

If we want to go back up the chain or directories, you use the shortcut of

$ cd ..                  - “the directory containing this one”, or more succinctly, the parent of the current directory.
$ cd -                   - Takes you into the previous directory I was in, similar but not the same as above.

$ mv                     - can move a file to somewhere else, change the name of it, and overwrite previous data

The first argument tells mv what we’re ‘moving’, while the second is where it’s to go. 
In the following case, we’re moving thesis/draft.txt to thesis/quotes.txt, which has the same effect as renaming the file. 

$ mv thesis/draft.txt thesis/quotes.txt                   - Changes or (moves) thesis/draft.txt     into    thesis/quotes.txt


'mkdir' is not limited to creating single directories one at a time. 
The '-p' option allows mkdir to create a directory with nested subdirectories in a single operation:

$ mkdir -p ../project/data ../project/results             - This created 3 folders named project, data, and results
                                                          - Note: it wouldn't create a project folder if it already existed

$ cp                     - Works the same way as $ mv but instead of moving it, it will copy it.
                         - Can copy many files and directories at once, as long as the last argument is a directory name

$ rm                     - Removes files so that if you check for it with $ ls it should say "No such file or directory"
                         - Only works on FILES, not directories (folders) unless you use $ rm -r / $ rm -r -i to be safe

* is a wildcard, which matches zero or more characters
? is also a wildcard, but it matches exactly one character.

Examples of how to use both are below: 

*.pdb matches ethane.pdb, propane.pdb, and every file that ends with ‘.pdb’. 
p*.pdb only matches pentane.pdb and propane.pdb.

?ethane.pdb would match methane.pdb whereas 
*ethane.pdb matches both ethane.pdb, and methane.pdb.

Which ls command(s) will produce this output?

            ethane.pdb methane.pdb

1. - $ ls *t*ane.pdb
2. - $ ls *t?ne.*
3. - $ ls *t??ne.pdb            - Answer
4. - $ ls ethane.

