Git allows you to view every change in your work when you saved it, compared to a text editor which only ever saves over what you had. 
A save in Git records differences in the files and folders AND keeps a historical record of each save.

As an individual developer, Git enables you to review how your project grows and to easily look at or restore file states from the past. 
Once connected to a network, Git allows you to push your project to GitHub or other alternatives such as: 

- Bitbucket
- Beanstalk
- GitLab 

for sharing and collaborating with other developers.

VCS - VERSION CONTROL SYSTEMS
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
This is why graphic designers and web developers like to use a Version Control System. 
So they keep keep every version of an image or layout.
It allows you to:
- Revert selected files, or the entire project back to a previous state
- Compare changes over time
- See who last modified something
- See who introduced an issue and when
- Recover lost files
- Fix screw ups

A major issue that people encounter is that they need to collaborate with developers on other systems. 


CVCS - CENTRALIZED VERSION CONTROL SYSTEMS
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed. 
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files. 
They also have a number of clients that check out files from that central place. 
For many years, this has been the standard for version control.

ADVANTAGES OF CVCS 
- Everyone knows to a certain degree what everyone else on the project is doing. 
- Administrators have fine-grained control over who can do what, and 
- It’s easier to administer a CVCS than it is to deal with local databases on every client.

DISADVANTAGES OF CVCS
- Its a single point of failure so if the server goes down, nobody can work, save or collaborate.
- If the hard disk with the central database becomes corrupted, and no backups were kept, you lose everything. (local VCS can also suffer this)


DVCS - DISTRIBUTED VERSION CONTROL SYSTEMS
In a DVCS, such as Git, every clone is really a full backup of all the data.
clients don’t just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history. 
Thus, if any server dies, and these systems were collaborating via that server, any client repositories can be copied back up to the server to restore it

With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment,
and stores a reference to that snapshot.
To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. 
Git thinks about its data more like a stream of snapshots.

Most operations in Git only require LOCAL access. This has many ADVANTAGES:
- No dependency on latency unlike CVCS'
- Can work offline and commit work and upload it later
- Can browse entire project history and changes locally


Everything in Git is checksummed. This means that nothing can be changed without Git knowing about it.
What Git uses for this is the SHA-1 hash which is a 40 character string in hexadecimal (0-9 & a-f)    e.g. 24b9da6552252987aa493b52f8696cd6d3b00373
Git stores everything in its database not by file name but by the hash value of its contents so you see this a lot.
After you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository
This means its much less stressful to changes things as we can experiment without the danger of severely screwing things up.


Git has three main states that your files can reside in:
- MODIFIED means that you have changed the file but have not committed it to your database yet.
- STAGED means that you have marked a modified file in its current version to go into your next commit snapshot.
- COMMITTED means that the data is safely stored in your local database.

Which leads us to the three main sections of a Git project: 
- The WORKING TREE is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory 
  and placed on disk for you to use or modify.
- The STAGING AREA is  file, generally contained in your Git directory, that stores information about what will go into your next commit. Can also
  be called the "index" in Git.
- The GIT DIRECTORY is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what 
  is copied when you clone a repository from another computer.

The basic Git workflow goes something like this:

1 - You modify files in your working tree.
2 - You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.
3 - You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

The command line is the only place you can run all Git commands

Below is a CheatSheet of commonly used commands in Git:

Commands related to a remote repository:
- git clone git@github.com:USER-NAME/REPOSITORY-NAME.git                                      - clones
- git push / git push origin main                                                             - moves from local to main
Commands related to the workflow:
- git add .                                                                                   - add all files in current directory to the staging area.
- git commit -m "A message describing what you have done to make this snapshot different"     - commit files from staging area 
Commands related to checking status or log history
- git status                                                                                  - will tell you status e.g. staged, not staged, tree clean
- git log                                                                                     - see your commit history

The basic Git syntax is              Program |   Action  |  Destination
For example,                                   
- git add . is read as                   git | add       | ., where the period represents everything in the current directory;
- git commit -m "message" is read as     git | commit -m | "message"; and
- git status is read as                  git | status    | (no destination).

One good habit to develop is ATMOIC COMMITS.
An Atomic Commit is a commit that includes changes related to only one feature or task of your program. 
There are 2 main reasons for doing this: 
- if something you change causes some problems, it's easy to revert the specific change without losing other changes; 
- it enables you to write better commit messages


GIT BRANCHING

git branch branch_name      - will make a new branch named "branch_name"

git checkout branch_name    - will switch to that branch that was created named "branch_name"

git checkout -b branch_name - will create a branch named "branch_name" and immediately switch to that branch.

git branch                  - will let you see all of your current branches AND confirm which branch you are in with an * like so     - git branch
                                                                                                                                        main
                                                                                                                                      * branch_name

git merge "branch_name"     - will take the changes you’ve committed in branch_name and add them to the branch that you’re currently on

git branch -d "branch_name" - will delete the branch if it HAS already been merged into main
git branch -D <branch_name> - will delete the branch even if it HASN'T been merged into main

Branches should be deleted once you've done with them as they can pile up and make it more difficult to find the branch you’re looking for when you need it.
